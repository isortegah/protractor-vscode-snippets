/**
* Snippets Protractor
* Autor: ISORTEGAH
* Fecha: 24/07/2016
*/
{
    
    "element.all" : {
        "prefix" : "elementAll",
        "body" : [
            "element.all(${locator})"
        ],
        "description" : "element.all"
    },
    "element.all.clone" : {
        "prefix" : "elementAllClone",
        "body" : [
            "element.all(${locator}).clone"
        ],
        "description" : "element.all.clone"
    },
    "element.all.all" : {
        "prefix" : "elementAllAll",
        "body" : [
            "element.all(${locator}).all(${locator2})"
        ],
        "description" : "element.all.all"
    },
    "element.all.filter" : {
        "prefix" : "elementAllFilter",
        "body" : [
            "element.all(${locator}).filter(function(elem, index) {",
            "/t${bodyFunction}",
            "/**",
            "/treturn elem.getText().then(function(text) {",
            "/t/treturn text==${textoBuscado}",
            "/t});",
            "*/",
            "}).first().click();"
        ],
        "description" : "element.all.filter"
    },
    "element.all.get" : {
        "prefix" : "elementAllGet",
        "body" : [
            "let list = element.all(${locator});",
            "list.get($1);"
        ],
        "description" : "element.all.get"
    },
    "element.all.first" : {
        "prefix" : "elementAllFirst",
        "body" : [
            "element.all(${locator}).first();"
        ],
        "description" : "element.all.first"
    },
    "element.all.last" : {
        "prefix" : "elementAllLast",
        "body" : [
            "element.all(${locator}).last();"
        ],
        "description" : "element.all.last"
    },
    "element.all.count" : {
        "prefix" : "elementAllCount",
        "body" : [
            "element.all(${locator}).count();"
        ],
        "description" : "element.all.count"
    },
    "element.all.locator" : {
        "prefix" : "elementAllLocator",
        "body" : [
            "element.all(${locator}).locator"
        ],
        "description" : "element.all.locator();"
    },
    "element.all.then" : {
        "prefix" : "elementAllThen",
        "body" : [
            "element.all(${locator}).then( function (arr){",
            "\t${bodyFunction}",
            "})"
        ],
        "description" : "element.all.then"
    },
    "element.all.each" : {
        "prefix" : "elementAllEach",
        "body" : [
            "element.all(${locator}).each(function(element, index){",
             "\t${bodyFunction}",   
            "})"
        ],
        "description" : "element.all.each"
    },
    "element.all.map" : {
        "prefix" : "elementAllMap",
        "body" : [
            "let items = element.all(${locator}).map(function(elm, index) {",
            "\treturn {",
            "\t\tindex: index,",
            "\t\ttext: elm.getText(),",
            "\t\tclass: elm.getAttribute('class')",
            "\t};",
            "});"
        ],
        "description" : "element.all.map"
    },
    "element.all.reduce" : {
        "prefix" : "elementAllReduce",
        "body" : [
            "let value = element.all(${locator}).reduce(function(acc, elem){",
            "\treturn elem.getText().then(function(text) {",
            "\t});",
            "}, '');"
        ],
        "description" : "element.all.reduce"
    },
    "element.all.evaluate" : {
        "prefix" : "elementAllEvaluate",
        "body" : [
            "let value = element.all(${locator}).evaluate('${elementScope}');"
        ],
        "description" : "element.all.evaluate"
    },
    "element.all.allowAnimations" : {
        "prefix" : "elementAllAllowAnimations",
        "body" : [
            "element.all(${locator}).allowAnimations(${action});"
        ],
        "description" : "element.all.allowAnimations"
    },

    /**
    * Secci√≥n element
    */
    "element" : {
        "prefix" : "element",
        "body" : [
            "element(${locator})"
        ],
        "description" : "element"
    },
    "element.then" : {
        "prefix" : "elementThen",
        "body" : [
            "element(${locator}).then(function(elem)",
            "${bodyLocator}",
            "});"
        ],
        "description" : "element.then"
    },
    "element.clone" : {
        "prefix" : "elementClone",
        "body" : [
            "element(${locator}).clone;"
        ],
        "description" : "element.clone"
    },
    "element.getWebElement" : {
        "prefix" : "elementGetWebElement",
        "body" : [
            "element(${locator}).getWebElement()"
        ],
        "description" : "element.getWebElement"
    },
    "element.all" : {
        "prefix" : "elementSubAll",
        "body" : [
            "let item = element(${locator}).all(${locator2});"
        ],
        "description" : "element.all"
    },
    "element.element" : {
        "prefix" : "elementElement",
        "body" : [
            "element(${locator}).element(${locator})"
        ],
        "description" : "element.element"
    },
    "element.$$" : {
        "prefix" : "element$$",
        "body" : [
            "let items = element(${locator}).$$(${selector})"
        ],
        "description" : "element.$$"
    },
    "element.$" : {
        "prefix" : "element$",
        "body" : [
            "element(${locator}).$(${selector})"
        ],
        "description" : "element.$"
    },
    "element.isPresent" : {
        "prefix" : "elementIsPresent",
        "body" : [
            "element(${lcator}).isPresent()"
        ],
        "description" : "element.isPresent"
    },
    "element.isElementPresent" : {
        "prefix" : "elementIsElementPresent",
        "body" : [
            "element(${locator}).isElementPresent(${selector})"
        ],
        "description" : "element.isElementPresent"
    },
    "element.evaluate" : {
        "prefix" : "elementEvaluate",
        "body" : [
            "element(${locator}).evaluate(${value})"
        ],
        "description" : "element.evaluate"
    },
    "element.allowAnimations" : {
        "prefix" : "elementAllowAnimationselall",
        "body" : [
            "element(${locator}).allowAnimations = ${boolean}"
        ],
        "description" : "element.allowAnimations"
    },
    "element.equals" : {
        "prefix" : "elementEquals",
        "body" : [
            "element(${locator}).equals(${elementEq})"
        ],
        "description" : "element.equals"
    }
} 